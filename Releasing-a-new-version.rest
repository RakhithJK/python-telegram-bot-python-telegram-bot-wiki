Releasing a new version
=======================

This project adheres to the `Semantic Versioning`_ specification by Tom Preston-Werner.

Releasing on Windows
--------------------

Creating a release on windows is inadvisable due to the limitations for setting file permissions on the Windows file-system. On Windows 10 you can install a native `Ubuntu shell`_ to solve this problem.
Within the shell first run::

$ umask 0022

To make sure file permissions will be set right. then Clone the repo (or pull the latest master) and follow the steps below to package the library. Uploading can be done from within Windows again if you prefer.

Requirements
------------

Packages::

$ pip install -r requirements-all.txt
$ pip install wheel twine

GPG-Key:

Every maintainer should have a GPG key to sign the release.
If you don't have one yet, create a new one.
You can e.g. follow `GitHubs guide <https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key>`_ to create a new GPG key, although you don't have to add the key to your account.

Moreover, the corresponding public keys should be made available to the users:

* Please add your public key to the ``public_keys`` directory with the appropriate name rename any existing keys ending on ``-current.gpg`` if appropriate.
  See also `the README <https://docs.python-telegram-bot.org/#verifying-releases>`_ for more information.
* Please also add your public key to the `website <https://python-telegram-bot.org/>`_.
  For this, please edit the ``verify-releases.html <https://github.com/python-telegram-bot/python-telegram-bot.github.io/blob/master/verify-releases.html>`_ file by adding a new ``<div> class="window">...</div>`` block with your key analogous to the existing ones.
* Optionally, you can also add your public key to a keyservers, e.g. `keyserver.ubuntu.com <https://keyserver.ubuntu.com/>`_.

Process
-------

* Build documentation locally, fix any error & commit::

  $ make -C docs/ html

* Run tests, fix any error & commit::
  
  $ pytest -v

* Bump version:

  * `telegram/_version.py`
  * `docs/source/conf.py`
  * if the release includes a Bot API update, update `README(_RAW).rst`
  * if the release drops a Python version, update `README(_RAW).rst` and `setup.py`

* Log changes to:

  * `CHANGES.rst`

  Since writing adding the correct links is a bit tiresome, here is a little `something`_ to help you with it.

* Commit the version bump and CHANGEs.rst::

  $ git commit -a -m 'Bump version to v<VERSION>'
  
* Build source distribution::

  $ python setup.py sdist bdist_wheel
  
  This will also build PTB-Raw

* Upload to PyPI (-s to sign the package with your GnuPG key!)::
 
  $ twine upload -s dist/python*
 
  This will also upload PTB-Raw
  
* Push all changes

  $ git push

* Create a `new release`_:

  * Tag version: v<VERSION>
  * Release title: v<VERSION>
  * Description: <logs from CHANGES.rst>
  * create sha1 signature:
    ```bash
    sha1sum --binary dist/python-telegram-bot-X.Y.tar.gz > dist/python-telegram-bot-X.Y.tar.gz.sha1
    sha1sum --binary dist/python-telegram-bot-raw-X.Y.tar.gz > dist/python-telegram-bot-raw-X.Y.tar.gz.sha1
    ```
  * Upload the source distribution from pypi as binary attachment + asc (gpg signature) + sha1 (create it yourself).

* Trigger documentation rebuild::

* On `Readthedocs dashboard`_ trigger a build for stable release (you'd probably need to do it twice: check the git revision being built to make sure it's the right one).

* `Close milestones`_ for this version.

* Test in a clean virtualenv that ``pip install python-telegram-bot`` and ``pip install python-telegram-bot-raw`` work with the new version.

* If the `doc-fixes`_ branch got merged, create a new one.


Public Announcements
--------------------

Please use the following channels/groups to announce a new version release:

* `@pythontelegrambotchannel`_
* `@pythontelegrambotgroup`_ (Channel posts are automatically forwarded to here)

Channel posts should be a bit more verbose than the plain release notes. E.g. they can

* list the (non-dev-team) authors, who contributed to the release, maybe even for each PR
* have a short, informative description of new/changed features

.. _`Semantic Versioning`: http://semver.org/
.. _`New release`: https://github.com/python-telegram-bot/python-telegram-bot/releases/new
.. _`Close milestones`: https://github.com/python-telegram-bot/python-telegram-bot/milestones
.. _`@pythontelegrambotgroup`: https://telegram.me/pythontelegrambotgroup
.. _`@pythontelegrambotchannel`: https://telegram.me/pythontelegrambotchannel
.. _`Readthedocs dashboard`: https://readthedocs.org/projects/python-telegram-bot/
.. _`Ubuntu shell`: https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/
.. _`something`: https://github.com/Bibo-Joshi/ptb-changelog-helper
.. _`doc-fixes`: https://github.com/python-telegram-bot/python-telegram-bot/tree/doc-fixes